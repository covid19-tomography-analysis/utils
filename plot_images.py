# -*- coding: utf-8 -*-
"""plot_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z_0uzwwx4lACOyiPEntZ8K0ZVdCuhwNK
"""

import numpy as np
import cv2
from matplotlib import pyplot as plt
import image_stats

def get_figure_pixels():
  return 1/plt.rcParams['figure.dpi']

def get_figure_axes(width, height, ncols=1, nrows=1 ):
  px = get_figure_pixels()
  fig, ax = plt.subplots(ncols=ncols, nrows=nrows, figsize=(width*px, height*px))
  return fig, ax

def plot_images_with_stats(images):
  for i, image in enumerate(images):
    width, height = image.shape
    fig, ax = get_figure_axes(width*4, height, ncols=2)
    ax[0].imshow(image, cmap="gray" )
    image_stats_dict = image_stats.get_stats_by_line_dict(image)
    for key, value in image_stats_dict.items():
      ax[1].plot(value, label=key)
      plt.legend()

def plot_image_with_stats(image):
    width, height = image.shape
    fig, ax = get_figure_axes(width*4, height, ncols=2)
    ax[0].imshow(image, cmap="gray" )
    image_stats_dict = image_stats.get_stats_by_line_dict(image)
    for key, value in image_stats_dict.items():
      ax[1].plot(value, label=key)
    plt.legend()

def plot_images_list(images):
  px = get_figure_pixels()
  width, height = images[0].shape
  nrows, ncols = 1, len(images)
  total_width = width*ncols
  total_height = height*nrows
  if total_width < 2**16 and total_height < 2**16:
    fig, ax = plt.subplots(ncols=ncols, nrows=nrows, figsize=(total_width*px, total_height*px))
    for i, axi in enumerate(ax.flat):
      axi.imshow(images[i], cmap="gray")
  else:
    for image in images:
      width, height = image.shape
      fig, ax = get_figure_axes(width, height)
      plt.imshow(image, cmap="gray")

def plot_images(*args):
  px = get_figure_pixels()
  nrows, ncols = max([len(i) for i in args]), np.shape(args)[0]
  image = args[0][0]  
  width, height = image.shape
  fig, ax = plt.subplots(nrows=nrows, ncols=ncols, figsize=(width*px*ncols, height*px*nrows))
  for i, images in enumerate(args):
    for j, image in enumerate(images):
      ax[j][i].imshow(args[i][j], cmap="gray")

  plt.tight_layout(True)
  plt.show()